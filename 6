import numpy as np
import torch
# a=np.array([4,5,6])
# type(a)
# a.shape
# print(a[0])
# b=np.array([[4,5,6],[1,2,3]])
# b.shape
# print(b[0,0],b[0,1],b[1,1])
# a=np.zeros((3,3),dtype=int)
# b=np.ones((4,3),dtype=int)
# c=np.identity(4)
# d=np.random.randn(3,2)
# print(a,b,c,d)
# a=np.arange(1,13).reshape(3,4)
# print(a)
# print(a[2,3],a[0,0])
# b = a[0:2, 1:3]
# print(b)
# print(b[0,0])
# c = a[1:3,:]
# print(c[0][-1])
# a=np.array([[1,2],[3,4],[5,6]])
# print(a[[0,1,2],[0,1,0]])
# a = np.arange(1,13).reshape(4,3)
# b = np.array([0,2,0,1])
# print(a[[np.arange(4),b]])
# a = np.arange(1,13).reshape(4,3)
# b = np.array([0,2,0,1])
# print(a[[np.arange(4),b]])
# x=np.array([1.0,2.0])
# print(x.dtype)
# x=np.array([[1,2],[3,4]],dtype=np.float64)
# y=np.array([[5,6],[7,8]],dtype=np.float64)
# x+y
# print(np.add(x,y))
# x-y
# print(np.subtract(x,y))
# print(x*y)
# print(np.multiply(x,y))
# print(np.dot(x,y))
# print(x/y)
# print(np.divide(x,y))
# print(np.sqrt(x))
# print(x.dot(y))
# print(np.dot(x,y))
# print(np.sum(x))
# print(np.sum(x,axis=0))
# print(np.sum(x,axis=1))
# print(np.mean(x))
# print(np.mean(x,axis=0))
# print(np.mean(x,axis=1))
# print(x.T)
# print(np.exp(x))
# print(np.argmax(x))
# print(np.argmax(x,axis=0))
# print(np.argmax(x,axis=1))
# import matplotlib.pyplot as plt
# x=np.arange(0,100,0.1)
# y=x*x
# plt.figure(figsize=(6,6))
# plt.plot(x,y)
# plt.show()
# x=np.arange(0,3*np.pi,0.1)
# y1=np.sin(x)
# y2=np.cos(x)
# plt.figure(figsize=(10,6))
# plt.plot(x,y1,color='Red')
# plt.plot(x,y2,color='Blue')
# plt.legend(['Sin','Cos'])
# plt.show()
# my_tensor=torch.tensor([[1,2,3],[4,5,6]],dtype=torch.float32,requires_grad=True)
# print(my_tensor)
# print(my_tensor.dtype)
# print(my_tensor.shape)
# print(my_tensor.requires_grad)
# x=torch.empty(size=(3,3))
# print(x)
# x=torch.zeros((3,3))
# print(x)
# x=torch.rand((3,3))
# print(x)
# x=torch.arange(start=0,end=5,step=1)
# print(x)
# x=torch.linspace(start=0.1,end=1,steps=10)
# print(x)
# x=torch.empty(size=(1,5)).normal_(mean=0,std=1)
# print(x)
# x=torch.empty(size=(1,5)).uniform_(0,1)
# print(x)
# x=torch.diag(torch.ones(3))
# print(x)
# tensor=torch.arange(4)
# print(tensor.bool())
# print(tensor.short())
# print(tensor.long())
# print(tensor.half())
# print(tensor.float())
# print(tensor.double())
#
# np_array=np.zeros((5,5))
# tensor=torch.from_numpy(np_array)
# np_array=torch.from_numpy(np_array)
# np_array_back=tensor.numpy()
#
# x=torch.tensor([1,2,3])
# y=torch.tensor([9,8,7])
# z1=torch.empty(3)
# torch.add(x,y,out=z1)
# z2=torch.add(x,y)
# z=x+y
# print(z)
# z=torch.true_divide(x,y)
# t=torch.zeros(3)
# t.add_(x)
# t+=x
# print(t)
# z=x.pow(2)
# print(z)
# z=x**2
# print(z)
# z=x>0
# print(z)
# z=x<0
# print(z)
# x1=torch.rand((2,5))
# x2=torch.rand((5,3))
# x3=torch.mm(x1,x2)
# x2=x1.mm(x2)
# print(x2)
# matrix_exp=torch.rand(5,5)
# print(matrix_exp.matrix_power(3))
# z=x*y
# print(z)
# z=torch.dot(x,y)
# print(z)
#
# batch=32
# n=10
# m=20
# p=30
# tensor1=torch.rand((batch,n,m))
# tensor2=torch.rand((batch,m,p))
# out_bmm=torch.bmm(tensor1,tensor2)
# print(out_bmm)
# x1=torch.rand((5,5))
# x2=torch.rand((1,5))
# z=x1-x2
# print(z)
# z=x1**x2
# print(z)
#
# sum_x=torch.sum(x,dim=0)
# values,indices=torch.max(x,dim=0)
# values,indices=torch.min(x,dim=0)
# abs_x=torch.abs(x)
# z=torch.argmax(x,dim=0)
# z=torch.argmin(x,dim=0)
# mean_x=torch.mean(x.float(),dim=0)
# z=torch.eq(x,y)
# print(z)
# sorted_y,indices=torch.sort(y,dim=0,descending=False)
# z=torch.clamp(x,min=0)
# print(z)
# x=torch.tensor([1,0,1,1,1],dtype=torch.bool)
# z=torch.any(x)
# print(z)
# z=torch.all(x)
# print(z)
#
# batch_size=10
# features=25
# x=torch.rand((batch_size,features))
# print(x[0].shape)
# print(x[:0].shape)
# print(x[2,0:10])
# x[0,0]=100
# x=torch.arange(10)
# indices=[2,5,8]
# print(x[indices])
#
# x=torch.rand((3,5))
# rows=torch.tensor([1,0])
# cols=torch.tensor([4,0])
# print(x[rows,cols].shape)
#
# x=torch.arange(10)
# print(x[(x<2)&(x>8)])
# print(x[x.remainder(2)==0])
# print(torch.where(x>5,x,x*2))
# print(torch.tensor([0,0,1,2,2,3,4]).unique())
# print(x.numel())
# x=torch.arange(9)
# x_3x3=x.view(3,3)
# print(x_3x3)
# x_3x3=x.reshape(3,3)
# y=x_3x3.t()
# print(y.contiguous().view(9))
# x1=torch.rand((2,5))
# x2=torch.rand((2,5))
# print(torch.cat((x1,x2),dim=0).shape)
# print(torch.cat((x1,x2),dim=1).shape)
# z=x1.view(-1)
# print(z.shape)
# batch=64
# x=torch.rand((batch,2,5))
# z=x.view(batch,-1)
# print(z.shape)
# z=x.permute(0,2,1)
# print(z.shape)
# x=torch.arange(10)
# print(x.unsqueeze(0).shape)
# print(x.unsqueeze(1).shape)
# x=torch.arange(10).unsqueeze(0).unsqueeze(1)
# z=x.squeeze(1)
# print(z.shape)
